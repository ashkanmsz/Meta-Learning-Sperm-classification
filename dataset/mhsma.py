# -*- coding: utf-8 -*-
"""mhsma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HcdSsHPYYUEs37tftgWB4y3l-ACgzZYW
"""
from .few_shot_dataset import FewShotDataset
from .load_data import load_data
from torchvision import transforms
from typing import Callable, List
from torch.utils.data import DataLoader
from PIL import Image
import copy

def normalize(data):
    loader = DataLoader(data, batch_size=len(data), num_workers=0)
    images, targets = (next(iter(loader)))
    mean, std = images.mean([0, 2, 3]), images.std([0, 2, 3])
    basic_transform = data.transform
    normal_transform = copy.deepcopy(basic_transform)
    normal_transform.transforms.append(transforms.Normalize(mean, std))
    data = MHSMA(dtype=data.dtype, label=data.label, params=data.params ,transform=normal_transform)
    return data

def default_transform() -> Callable:
      return(
          transforms.Compose(
              [
                  transforms.Grayscale(num_output_channels=3),
                  transforms.Resize((128,128)),
                  # transforms.RandomResizedCrop((100,100)),
                  # transforms.RandomRotation(30),
                  transforms.ToTensor(),
              ]
          )
      )

class MHSMA(FewShotDataset):
    def __init__(self, dtype, label, params=None, transform=None):
        default_params = {"image_size":128, "balancer": False}
        if params:
            default_params.update(params)
        self.params = default_params
        
        data = load_data(label=label, balancer=self.params["balancer"], image_size=self.params["image_size"])

        if dtype == "train":
            self.images = data["x_train"]
            self.targets = data["y_train"]
            self.transform = transform if transform else default_transform()

        elif dtype == "test":
            self.images = data["x_test"]
            self.targets = data["y_test"]
            self.transform = transform if transform else default_transform()

        elif dtype == "valid":
            self.images = data["x_val"]
            self.targets = data["y_val"]
            self.transform = transform if transform else default_transform()

        self.label = label
        self.dtype = dtype
        self.class_name = ["healthy", "unhealthy"]

    def get_labels(self) -> List[int]:
        return self.targets

    def __len__(self) -> int:
        return self.images.shape[0]

    def __getitem__(self, item):
        img = self.transform(Image.fromarray((self.images[item])))
        target = int(self.targets[item])
        return img, target
